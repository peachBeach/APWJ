{"_attachments":{},"_id":"json-easy-filter","_rev":"448108-61f20ba0ffbd598ed2968745","author":{"name":"Liviu Grigorescu"},"description":"Javascript node module for programmatic filtering and validation of Json objects.","dist-tags":{"latest":"0.3.1"},"license":"MIT","maintainers":[{"name":"gliviu","email":"grigoresculiviu@gmail.com"}],"name":"json-easy-filter","readme":"json-easy-filter\n================\nJavascript node module for programmatic filtering and validation of Json objects.\n\n## Installation\n```shell\n$ npm install json-easy-filter\n```\n\n## Usage\n[plunkr](http://plnkr.co/edit/yZ85mr)\n```js\nvar JefNode = require('json-easy-filter').JefNode;\n\nvar obj = {\n\t\tv1: 100,\n\t\tv2: 'v2',\n\t\tv3: {\n\t\t\t\tv4: 'v4',\n\t\t\t\tv5: 400\n\t\t}\n};\nvar numbers = new JefNode(obj).filter(function(node) {\n\t\tif (node.type()==='number') {\n\t\t\treturn node.key + ' ' + node.value;\n\t\t}\n\t});\n\nconsole.log(numbers);\n>> [ 'v1 100', 'v5 400' ]\n```\n#### How it works\nAny newly instantiated JefNode object is actually a structure wrapping the real Json object  so that for each Json node there will be a corresponding JefNode. \nThe purpose of this structure is to allow easy tree navigation. Each JefNode maintains properties such as 'parent' which returns the ancestor or get(path) which returns a child based on its relative path.\nIn fact 'new JefNode(obj)' returns the root JefNode which is further used to [filter()](#exFilter), [validate()](#exValidate) or [remove()](#exRemove).\n\n#### A word on performance\nIt is obvious already that json-easy-filter is designed more towards convenience rather than being performance wise. Particularly using it on server side or feeding large files may pose a problem for high request rate apps. \nIf this is the case, Jef exposes its own internal [traversal](#exTraverse) mechanism or you may try one of the similar projects presented in [links](#Links) section.\n\n#### Filter, validate, remove\nTree traversal is provided by `JefNode.filter(callback)` . It will recursively iterate each node and trigger the callback method which receives the currently traveled JefNode. Use `node.value` and `node.key` to get access to the real json object. Use `parent`, `path` and `get()` to navigate the tree. Use `isRoot`, `isLeaf`, `isCircular` for information about current node. `level` provides the traversal depth. \n\n**IMPORTANT** -  Do not change Json object during filter() call. Keep a separate list of changes and apply it after filter has finished. For convenience, [remove()](#exRemove) will iterate the tree and delete nodes passed back by the callback.\nFollowing example will structure of 'text' node.\n``` js\nvar obj = {text : 't'};\nvar modif = [];\nvar res = new JefNode(obj).filter(function(node) {\n    if (node.has('text')){\n        modif.push({\n            parent: node.value, \n            newVal: {'new':'val'}})\n    }\n});\nfor (var i = 0; i < modif.length; i++) {\n    var elem = modif[i];\n    elem.parent.text = elem.newVal; \n}\nconsole.log(JSON.stringify(obj, null, 2));\n>>\n{\n  \"text\": {\n    \"new\": \"val\"\n  }\n}\n\n```\nAside from filter and remove, there is also a [validate()](#exValidate) method. Returning false from callback will cause the whole validation to fail.\n\nCheck out the examples and [API](#API) for more info.\n\n\n## Examples\nUse the <a href=\"https://raw.githubusercontent.com/gliviu/json-easy-filter/master/tests/sampleData1.js\" target=\"_blank\">sample</a> data to follow this section.\n\n<a name=\"exFilter\"></a>\n#### Filter\n&#35;1. node.has() [plunkr](http://plnkr.co/edit/nPwRhF)\n\n```js\nvar res = new JefNode(sample1).filter(function(node) {\n\tif (node.has('username')) {\n\t\treturn node.value.username;\n\t}\n});\nconsole.log(res);\n\n>> [ 'john', 'adams', 'lee', 'scott', null ] \n```\n&#35;2. node.value [plunkr](http://plnkr.co/edit/x9Nq4z)\n```js\nvar res = new JefNode(sample1).filter(function(node) {\n\tif (node.has('salary') && node.value.salary > 200) {\n\t\treturn node.value.username + ' ' + node.value.salary;\n\t}\n});\nconsole.log(res);\n>> [ 'lee 300', 'scott 400' ] \n```\n\n&#35;3. Paths, node.has(RegExp), level [plunkr](http://plnkr.co/edit/1t4DJ9)\n```js\nvar res = new JefNode(sample1).filter(function(node){\n\tif(node.has(/^(phone|email|city)$/)){\n\t\treturn 'contact: '+node.path;\n\t}\n\tif(node.pathArray[0]==='departments' && node.pathArray[1]==='admin' && node.level===3){\n\t\treturn 'department '+node.key+': '+node.value;\n\t}\n});\nconsole.log(res);\n>> \n[ 'department name: Administrative',\n  'department manager: john',\n  'department employees: john,lee',\n  'contact: employees.0.contact.0',\n  'contact: employees.0.contact.1',\n  'contact: employees.0.contact.2.address' ]\n```\nWhen `has(propertyName)` receives a string it calls `node.value[propertyName]`. If RegExp is passed, all properties of `node.value` are iterated and tested against it.\n\n&#35;4. node.key, node.parent and node.get() [plunkr](http://plnkr.co/edit/zEusEK)\n```js\nvar res = new JefNode(sample1).filter(function(node){\n\tif(node.key==='email' && node.value==='a@b.c'){\n\t\tvar res = [];\n\t\tres.push('Email: key - '+node.key+', value: '+node.value+', path: '+node.path);\n\n\t\tif(node.parent){ // Test parent exists\n\t\t\tvar emailContainer = node.parent;\n\t\t\tres.push('Email parent: key - '+emailContainer.key+', type: '+emailContainer.type()+', path: '+emailContainer.path);\n\t\t}\n\n\t\tif(node.parent && node.parent.parent){\n\t\t\tvar contact = node.parent.parent;\n\t\t\tres.push('Contact: key - '+contact.key+', type: '+contact.type()+', path: '+contact.path);\n\n\t\t\tvar city = contact.get('2.address.city');\n\t\t\tif(city){ // Test relative path exists. node.get() returns 'undefined' otherwise.\n\t\t\t\tres.push('City: key - '+city.key+', type: '+city.value+', path: '+city.path);\n\t\t\t}\n\t\t}\n\n\t\treturn res;\n\t}\n});\nconsole.log(res);\n>>\n[ [ 'Email: key - email, value: a@b.c, path: employees.0.contact.1.email',\n    'Email parent: key - 1, type: object, path: employees.0.contact.1',\n    'Contact: key - contact, type: array, path: employees.0.contact',\n    'City: key - city, type: NY, path: employees.0.contact.2.address.city' ] ]\n```\n\n&#35;5. Array handling [plunkr](http://plnkr.co/edit/lseyjv)\n```js\nvar res = new JefNode(sample1).filter(function(node){\n\tif(node.parent && node.parent.key==='employees'){\n\t\tif(node.type()==='object'){\n\t\t\treturn 'key: '+node.key+', username: '+node.value.username+', path: '+node.path;\n\t\t} else{\n\t\t\treturn 'key: '+node.key+', username: '+node.value+', path: '+node.path;\n\t\t}\n\t}\n});\nconsole.log(res);\n>>\n[ 'key: 0, username: john, path: departments.admin.employees.0',\n  'key: 1, username: lee, path: departments.admin.employees.1',\n  'key: 0, username: scott, path: departments.it.employees.0',\n  'key: 1, username: john, path: departments.it.employees.1',\n  'key: 2, username: lewis, path: departments.it.employees.2',\n  'key: 0, username: adams, path: departments.finance.employees.0',\n  'key: 1, username: scott, path: departments.finance.employees.1',\n  'key: 2, username: lee, path: departments.finance.employees.2',\n  'key: 0, username: john, path: employees.0',\n  'key: 1, username: adams, path: employees.1',\n  'key: 2, username: lee, path: employees.2',\n  'key: 3, username: scott, path: employees.3',\n  'key: 4, username: null, path: employees.4',\n  'key: 5, username: undefined, path: employees.5' ]\n```\n&#35;6. Circular references [plunkr](http://plnkr.co/edit/VdWlbg)\n```js\nvar data = {\n\tx: {\n\t\ty: null  \n\t},\n\tz: null,\n\tt: null\n};\ndata.z = data.x;\ndata.x.y = data.z;\ndata.t = data.z;\nvar res = new JefNode(data).filter(function(node) {\n\tif(node.isRoot){\n\t\treturn 'root';\n\t} else if (node.isCircular) {\n\t\treturn 'circular key: '+node.key + ', path: '+node.path;\n\t} else{\n\t\treturn 'key: '+node.key + ', path: '+node.path;\n\t}\n});\nconsole.log(res);\n>>\n[   \"root\",\n    \"key: x, path: x\",\n    \"circular key: y, path: x.y\",\n    \"circular key: z, path: z\",\n    \"circular key: t, path: t\" ]\n```\n\n<a name=\"exValidate\"></a>\n#### Validate\n&#35;1. node.validate() [plunkr](http://plnkr.co/edit/L7q3VH)\n```js\nvar res = new JefNode(sample1).validate(function(node) {\n\tif (node.parent && node.parent.key==='departments' && !node.has('manager')) {\n\t\t// current department is missing the mandatory 'manager' property\n\t\treturn false;\n\t}\n});\nconsole.log(res);\n>> false\n```\n&#35;2. Validation info [plunkr](http://plnkr.co/edit/EVqTtV)\n```js\nvar info = [];\nvar res = new JefNode(sample1).validate(function(node) {\nvar valid = true;\nif (node.parent && node.parent.key==='departments' ) {\n\t// Inside department\n\tif(!node.has('manager')){\n\t\tvalid = false;\n\t\tinfo.push('Error: '+node.key+' department is missing mandatory manager property');\n\t}\n\tif(!node.has('employees')){\n\t\tvalid = false;\n\t\tinfo.push('Error: '+node.key+' department is missing mandatory employee list');\n\t} else if(node.get('employees').type()!=='array'){\n\t\tvalid = false;\n\t\tinfo.push('Error: '+node.key+' department has wrong employee list type \"'+node.get('employees').type()+'\"');\n\t} else if(node.value.employees.length===0){\n\t\tinfo.push('Warning: '+node.key+' department has no employees');\n\t}\n}\nif (node.parent && node.parent.key==='employees' && node.type()==='object') {\n\t// Inside employee\n\tif(!node.has('username') || node.get('username').type()!=='string'){\n\t\tvalid = false;\n\t\tinfo.push('Error: Employee '+node.path+' does not have username');\n\t} else if(!node.has('gender')){\n\t\tinfo.push('Warning: Employee '+node.value.username+' does not have gender');\n\t}\n}\n\nreturn valid;\n});\nconsole.log(res.toString());\nconsole.log(info);\n>>\nfalse\n[ 'Error: marketing department is missing mandatory manager property',\n  'Warning: marketing department has no employees',\n  'Error: hr department is missing mandatory manager property',\n  'Error: hr department is missing mandatory employee list',\n  'Error: supply department is missing mandatory manager property',\n  'Error: supply department has wrong employee list type \"string\"',\n  'Warning: Employee scott does not have gender',\n  'Error: Employee employees.4 does not have username',\n  'Error: Employee employees.5 does not have username' ]\n```\n&#35;3. Sub validator [plunkr](http://plnkr.co/edit/Z43d0e)\n```js\nvar info = [];\nvar res = new JefNode(sample1).get('departments').validate(function (node, local) {\n    var valid = true;\n    if (local.level === 1) {\n        // Inside department\n        if (!node.has('manager')) {\n            valid = false;\n            info.push('Error: ' + local.path + '(' + node.path + ')' + ' department is missing mandatory manager property');\n        }\n    }\n    return valid;\n});\nconsole.log(res);\nconsole.log(info);\n>>\nfalse\n[ 'Error: marketing(departments.marketing) department is missing mandatory manager property',\n  'Error: hr(departments.hr) department is missing mandatory manager property',\n  'Error: supply(departments.supply) department is missing mandatory manager property' ]\n```\n\n\n<a name=\"exRemove\"></a>\n#### Remove\nInstead of using filter() for deleting certain nodes, remove() makes it easy by just requiring to return the nodes to be deleted from the callback.\n\n[plunkr](http://plnkr.co/edit/UzVghb)\n```js\nvar sample = JSON.parse(JSON.stringify(sample1));\nvar success = new JefNode(sample).remove(function(node) {\n    if(node.parent && node.parent.key==='departments'){\n        var isITDepartment = node.has('name') && node.value.name==='IT'; \n        if(isITDepartment){\n            // remove manager and first employee from IT department.\n            return [node.get('manager'), node.get('employees.0')] ;\n        } else{\n            // remove all but IT department\n            return node;\n        }\n    }\n    if(node.parent && node.parent.key==='employees' && node.type()==='object'){\n        if(node.has('salary') && node.get('salary').type()==='number' && node.value.salary<400){\n            return node;\n        }\n    }\n});\nconsole.log(JSON.stringify(sample, null, 4));\nconsole.log(success);\n>> \n{\n    \"departments\": {\n        \"it\": {\n            \"name\": \"IT\",\n            \"employees\": [\n                \"john\",\n                \"lewis\"\n            ]\n        }\n    },\n    \"employees\": [\n        {\n            \"username\": \"scott\",\n            \"firstName\": \"Scott\",\n            \"lastName\": \"SCOTT\",\n            \"salary\": 400,\n            \"birthDate\": \"1993/11/20\"\n        },\n        {\n            \"firstName\": \"Unknown2\",\n            \"lastName\": \"Unknown2\"\n        }\n    ]\n}\ntrue\n```\n<a name=\"exTraverse\"></a>\n#### Traverse\nInternal Json traversal mechanism is exposed for cases where performance is an issue.\n[plunkr](http://plnkr.co/edit/8DfcTh)\n```js\nvar traverse = require('json-easy-filter').traverse;\nvar res = [];\ntraverse(sample1, function (key, val, path, parentKey, parentVal, level, isRoot, isLeaf, isCircular) {\n    debugger;\n    if (parentKey && parentKey === 'departments') {\n        // inside department\n        res.push('key: ' + key + ', val: ' + val.name + ', path: ' + path);\n    }\n})\nconsole.log(res);\n\n>> [  'key: admin, val: Administrative, path: departments,admin',\n\t  'key: it, val: IT, path: departments,it',\n\t  'key: finance, val: Financiar, path: departments,finance',\n\t  'key: marketing, val: Commercial, path: departments,marketing',\n\t  'key: hr, val: Human resources, path: departments,hr',\n\t  'key: supply, val: undefined, path: departments,supply' ]\n```\n\n#### Refresh\nrefresh() is used to update Jef internal structure when structure of wrapped json changes.\n```js\nvar root = new JefNode(obj);\nvar res = root.filter(function(node) {\n    if (node.key==='text1'){\n        return node.value;\n    }\n});\nconsole.log(res);\n\nobj.text1 = {'new': 'val'};\nroot.refresh();\nres = root.filter(function(node) {\n    if (node.key==='text1'){\n        return node.value;\n    }\n});\nconsole.log(res);\n\n>>\n[ 't1' ]\n[ { new: 'val' } ]\n```\n\n### Tests\nMake sure it's all working with 'npm test'. The awesome [istanbul](https://www.npmjs.org/package/istanbul) tool provides code coverage.\n\n<a name=\"API\"></a>\n## API\n\n**JefNode class**\n* `node.key` - node's key. For root object it is undefined.\n* `node.value` - the real Json value behind node.\n* `node.parent` - node's parent. Root's parent points to itself so that node.parent is never undefined.\n* `node.isRoot` - true if current node is the root of the object tree.\n* `node.pathArray` - string array containing the path to current node.\n* `node.path` - string representation of `node.pathArray`.\n* `node.root` - root `JefNode`.\n* `node.level` - level of the current node. Root node has level 0.\n* `node.isLeaf` - true if it is a leaf node. Primitives are considered leafs, empty objects (ie. `a: { }`) are not.\n* `node.isCircular` - indicates a circular reference \n* `node.count` - number of first level child nodes. For array indicates nuber of elements. \n* `node.has(propertyName)` - returns true if `node.value` has that property. If a regular expression is passed, all `node.value` property names are iterated and matched against pattern. \n* `node.get(relativePath)` - returns the `JefNode` relative to current node or 'undefined' if path cannot be found.\n* `node.type()` - returns the type of `node.value` as one of 'string', 'array', 'object', 'function', 'number', 'boolean', 'undefined', 'null'.\n* `node.hasType(types)` - compares against multiple types - node.hasType('number', 'object') returns true if node is either of the two  types.\n* `node.isEmpty()` - returns true if this object/array has no children/elements.\n* `node.filter(callback)` - traverses node's children and triggers `callback(childNode, localContext)`. The result of callback call is added to an array which is later returned by filter method. When filter method is called for a node other than root, `localContext` holds info relative to that node. If it is called for root, there is no reason to use `localContext`. See `JefLocalContext` class below.\n* `node.filterFirst(callback)` - use this to traverse the first level (direct children) of node.\n* `node.filterLevel(level, callback)` - iterates only nodes at specified level.\n* `node.validate(callback)` - traverses node's children and triggers `callback(childNode, localContext)`. If any of the calls to callback method returns false, validate method will also return false. `localContext` is treated the same as for filter method.\n* `node.remove(callback)` - traverses node's children and triggers `callback(childNode, localContext)`. Callback method is expected to return the nodes to be deleted. Either a JefNode or an array of JefNode objects may be returned. After traversal is complete the nodes are removed from Js tree. The root object is never deleted. \n* `node.refresh()` - call this to update Jef object after any of node's content have been created/updated/deleted. Shall not be used inside `node.filter()`, `node.validate()`, `node.remove()`. \n\n\n**JefLocalContext class**\n* `localContext.isRoot` - true if current node is the one that started filter/validate/remove operation.\n* `localContext.pathArray` - string array containing the path to this node relative to current filter/validate/remove operation.\n* `localContext.path` - string representation of `localContext.pathArray`.\n* `localContext.level` - level of this node relative to current filter/validate operation.\n* `localContext.root` - node that started filter/validate/remove operation.\n\n\n## Changelog\nv0.3.0\n* exposed internal traverse() mechanism. Instead of require('json-easy-filter') use either require('json-easy-filter').JefNode or require('json-easy-filter').traverse.\n* node.getType() is deprecated in favour of node.type()\n* addedd node.remove()\n* node.isLeaf behavour no longer works as in 0.3.0. See API.\n* removed dependecy on <a href=\"https://www.npmjs.org/package/traverse\" target=\"_blank\">traverse</a>\n* added node.count, node.isEmpty(), node.root, filterFirst(), filterLevel()\n* added node.refresh() to support json content modification\n* bug fixes\n\n<a name=\"Links\"></a>\n## Links\n* XPath like query for json - <a href=\"https://www.npmjs.org/package/JSONPath\" target=\"_blank\">JsonPath</a>, <a href=\"https://www.npmjs.org/package/spahql\" target=\"_blank\">SpahQL</a>\n* Filter, map, reduce - <a href=\"https://www.npmjs.org/package/traverse\" target=\"_blank\">traverse</a>\n* Json validator - <a href=\"https://www.npmjs.org/package/json-filter\" target=\"_blank\">json-filter</a>, <a href=\"https://www.npmjs.org/package/json-validator\" target=\"_blank\">json-validator</a>\n* Linq - <a href=\"http://jlinq.codeplex.com/wikipage?title=Command%20List\" target=\"_blank\">jLinq</a>, <a href=\"http://jslinq.codeplex.com/\" target=\"_blank\">jslinq</a>","time":{"created":"2022-01-27T03:04:00.423Z","modified":"2022-01-27T03:04:00.423Z","0.1.0":"2014-08-30T11:02:39.648Z","0.1.1":"2014-08-30T17:15:20.023Z","0.2.0":"2014-09-02T18:16:31.389Z","0.3.0":"2014-10-18T05:48:42.867Z","0.3.1":"2015-08-16T11:05:49.077Z"},"versions":{"0.1.0":{"name":"json-easy-filter","version":"0.1.0","description":"Javascript node module for convenient json filtering or programatic querying","main":"index.js","repository":{"type":"git","url":"https://github.com/gliviu/json-easy-filter"},"keywords":["json","filter","query","validation"],"dependencies":{"traverse":"0.6.6"},"author":{"name":"Liviu Grigorescu"},"license":"MIT","gitHead":"20a2ee11b6814ee55831dec17cf4be87df540d58","bugs":{"url":"https://github.com/gliviu/json-easy-filter/issues"},"homepage":"https://github.com/gliviu/json-easy-filter","_id":"json-easy-filter@0.1.0","scripts":{},"_shasum":"c34ec619ba18cc20900bdb1849b458cb6de8cb6e","_from":".","_npmVersion":"1.4.14","_npmUser":{"name":"gliviu","email":"grigoresculiviu@gmail.com"},"maintainers":[{"name":"gliviu","email":"grigoresculiviu@gmail.com"}],"dist":{"shasum":"c34ec619ba18cc20900bdb1849b458cb6de8cb6e","tarball":"https://registry.npmmirror.com/json-easy-filter/-/json-easy-filter-0.1.0.tgz","size":2831,"integrity":"sha512-Q1sGPPN6PhbvgoUZJcrOwpO5SAffkaMg/HB0UgAo/X8Pj2F2TCcBw0B2/Vr84Y3z0f1cEp5tF212aCh2eU/1dw=="},"directories":{},"_cnpmcore_publish_time":"2021-12-23T11:48:16.446Z"},"0.1.1":{"name":"json-easy-filter","version":"0.1.1","description":"Javascript node module for convenient json filtering or programatic querying","main":"index.js","repository":{"type":"git","url":"https://github.com/gliviu/json-easy-filter"},"keywords":["json","filter","query","validation"],"dependencies":{"traverse":"0.6.6"},"author":{"name":"Liviu Grigorescu"},"license":"MIT","gitHead":"0180e0afaf7cfbc30c6370fb3deaa296560e05a7","bugs":{"url":"https://github.com/gliviu/json-easy-filter/issues"},"homepage":"https://github.com/gliviu/json-easy-filter","_id":"json-easy-filter@0.1.1","scripts":{},"_shasum":"6d4436c67b2c91668f862769d8a93a08979c1cce","_from":".","_npmVersion":"1.4.14","_npmUser":{"name":"gliviu","email":"grigoresculiviu@gmail.com"},"maintainers":[{"name":"gliviu","email":"grigoresculiviu@gmail.com"}],"dist":{"shasum":"6d4436c67b2c91668f862769d8a93a08979c1cce","tarball":"https://registry.npmmirror.com/json-easy-filter/-/json-easy-filter-0.1.1.tgz","size":3690,"integrity":"sha512-I/kO/WnqfgW1OHqP2B8OKQj4YwBnBNwoSuzwtThNAkAEpV4qNJUkoKREg0AUDTPkGSpISSR3HqGj1b2fLAlw0Q=="},"directories":{},"_cnpmcore_publish_time":"2021-12-23T11:48:17.332Z"},"0.2.0":{"name":"json-easy-filter","version":"0.2.0","description":"Javascript node module for convenient json filtering or programatic querying","main":"index.js","repository":{"type":"git","url":"https://github.com/gliviu/json-easy-filter"},"keywords":["json","filter","query","validation"],"dependencies":{"traverse":"0.6.6"},"author":{"name":"Liviu Grigorescu"},"license":"MIT","gitHead":"acbc6cf54271cbf97788a63b8e0baa520f7aff08","bugs":{"url":"https://github.com/gliviu/json-easy-filter/issues"},"homepage":"https://github.com/gliviu/json-easy-filter","_id":"json-easy-filter@0.2.0","scripts":{},"_shasum":"ba3139c8741c493da36cd07df2e5cb8027fb4789","_from":".","_npmVersion":"1.4.23","_npmUser":{"name":"gliviu","email":"grigoresculiviu@gmail.com"},"maintainers":[{"name":"gliviu","email":"grigoresculiviu@gmail.com"}],"dist":{"shasum":"ba3139c8741c493da36cd07df2e5cb8027fb4789","tarball":"https://registry.npmmirror.com/json-easy-filter/-/json-easy-filter-0.2.0.tgz","size":7074,"integrity":"sha512-Dfq59FIvKTu9WmP8dyGOTf5b/nw+lXXxz48tbyUpglSPzF5WXButAaKILXw1453nskDZQlP4vHccOgRd2mdcoQ=="},"directories":{},"_cnpmcore_publish_time":"2021-12-23T11:48:18.193Z"},"0.3.0":{"name":"json-easy-filter","version":"0.3.0","description":"Javascript node module for programmatic filtering and validation of Json objects.","main":"index.js","repository":{"type":"git","url":"https://github.com/gliviu/json-easy-filter"},"keywords":["json","filter","query","validation"],"devDependencies":{"istanbul":"0.3.2","colors":"0.6.2"},"scripts":{"test":"istanbul cover tests/runTests.js"},"author":{"name":"Liviu Grigorescu"},"license":"MIT","gitHead":"2aa53dad860440f3b73f1adf439d05769a1e3560","bugs":{"url":"https://github.com/gliviu/json-easy-filter/issues"},"homepage":"https://github.com/gliviu/json-easy-filter","_id":"json-easy-filter@0.3.0","_shasum":"d10f73d8199cc9d32be3c4f132b82f5b67eb02ab","_from":".","_npmVersion":"1.4.14","_npmUser":{"name":"gliviu","email":"grigoresculiviu@gmail.com"},"maintainers":[{"name":"gliviu","email":"grigoresculiviu@gmail.com"}],"dist":{"shasum":"d10f73d8199cc9d32be3c4f132b82f5b67eb02ab","tarball":"https://registry.npmmirror.com/json-easy-filter/-/json-easy-filter-0.3.0.tgz","size":18193,"integrity":"sha512-yv0g7x9lGgwuoC0dkqIauNshxBXNEGpEte5wUfsS/KZQCBT8JCVCw4jIXwV8p6A07Al6YXfFA6HzMmL6xbHiHQ=="},"directories":{},"_cnpmcore_publish_time":"2021-12-23T11:48:19.083Z"},"0.3.1":{"name":"json-easy-filter","version":"0.3.1","description":"Javascript node module for programmatic filtering and validation of Json objects.","main":"index.js","repository":{"type":"git","url":"https://github.com/gliviu/json-easy-filter"},"keywords":["json","filter","query","validation"],"devDependencies":{"istanbul":"0.3.2","colors":"0.6.2"},"scripts":{"test":"istanbul cover tests/runTests.js"},"author":{"name":"Liviu Grigorescu"},"license":"MIT","gitHead":"7a467696518ab87e9238a2a06b3fc43f6101b425","bugs":{"url":"https://github.com/gliviu/json-easy-filter/issues"},"homepage":"https://github.com/gliviu/json-easy-filter","_id":"json-easy-filter@0.3.1","_shasum":"f905974cffb38fe32317d91073fac6b8cba4c14a","_from":".","_npmVersion":"1.4.14","_npmUser":{"name":"gliviu","email":"grigoresculiviu@gmail.com"},"maintainers":[{"name":"gliviu","email":"grigoresculiviu@gmail.com"}],"dist":{"shasum":"f905974cffb38fe32317d91073fac6b8cba4c14a","tarball":"https://registry.npmmirror.com/json-easy-filter/-/json-easy-filter-0.3.1.tgz","size":18994,"integrity":"sha512-E+bsfF+/hgWO2+njl97thG8AAC7azX/S8OSU4VH6vzP5qQxUze39N9OUzcAn+WHT5hZwDLBUMUShU7XyDnKA5g=="},"directories":{},"_cnpmcore_publish_time":"2021-12-23T11:48:19.179Z"}},"_source_registry_name":"default"}