{"_attachments":{},"_id":"fd-slicer2","_rev":"719213-61f25d496be0630f692f76da","author":{"name":"Nour Al-Habash","email":"nour35000@gmail.com"},"description":"Fork of fd-slicer that fixes the DEP00005 deprecation error","dist-tags":{"latest":"1.2.0"},"license":"MIT","maintainers":[{"name":"nalhabash","email":"nour35000@gmail.com"}],"name":"fd-slicer2","readme":"# fd-slicer2\n\n[![Build Status](https://travis-ci.com/nalhabash/node-fd-slicer.svg?branch=master)](https://travis-ci.com/nalhabash/node-fd-slicer)\n[![node](https://img.shields.io/node/v/fd-slicer2.svg)](https://github.com/nalhabash/fd-slicer2)\n\n### *This is a fork of the original fd-slicer package, without the DEP0005 deprecation error*\n\nSafe `fs.ReadStream` and `fs.WriteStream` using the same fd.\n\nLet's say that you want to perform a parallel upload of a file to a remote\nserver. To do this, we want to create multiple read streams. The first thing\nyou might think of is to use the `{start: 0, end: 0}` API of\n`fs.createReadStream`. This gives you two choices:\n\n 0. Use the same file descriptor for all `fs.ReadStream` objects.\n 0. Open the file multiple times, resulting in a separate file descriptor\n    for each read stream.\n\nNeither of these are acceptable options. The first one is a severe bug,\nbecause the API docs for `fs.write` state:\n\n> Note that it is unsafe to use `fs.write` multiple times on the same file\n> without waiting for the callback. For this scenario, `fs.createWriteStream`\n> is strongly recommended.\n\n`fs.createWriteStream` will solve the problem if you only create one of them\nfor the file descriptor, but it will exhibit this unsafety if you create\nmultiple write streams per file descriptor.\n\nThe second option suffers from a race condition. For each additional time the\nfile is opened after the first, it is possible that the file is modified. So\nin our parallel uploading example, we might upload a corrupt file that never\nexisted on the client's computer.\n\nThis module solves this problem by providing `createReadStream` and\n`createWriteStream` that operate on a shared file descriptor and provides\nthe convenient stream API while still allowing slicing and dicing.\n\nThis module also gives you some additional power that the builtin\n`fs.createWriteStream` do not give you. These features are:\n\n * Emitting a 'progress' event on write.\n * Ability to set a maximum size and emit an error if this size is exceeded.\n * Ability to create an `FdSlicer` instance from a `Buffer`. This enables you\n   to provide API for handling files as well as buffers using the same API.\n\n## Usage\n\n```js\nvar fdSlicer = require('fd-slicer');\nvar fs = require('fs');\n\nfs.open(\"file.txt\", 'r', function(err, fd) {\n  if (err) throw err;\n  var slicer = fdSlicer.createFromFd(fd);\n  var firstPart = slicer.createReadStream({start: 0, end: 100});\n  var secondPart = slicer.createReadStream({start: 100});\n  var firstOut = fs.createWriteStream(\"first.txt\");\n  var secondOut = fs.createWriteStream(\"second.txt\");\n  firstPart.pipe(firstOut);\n  secondPart.pipe(secondOut);\n});\n```\n\nYou can also create from a buffer:\n\n```js\nvar fdSlicer = require('fd-slicer');\nvar slicer = FdSlicer.createFromBuffer(someBuffer);\nvar firstPart = slicer.createReadStream({start: 0, end: 100});\nvar secondPart = slicer.createReadStream({start: 100});\nvar firstOut = fs.createWriteStream(\"first.txt\");\nvar secondOut = fs.createWriteStream(\"second.txt\");\nfirstPart.pipe(firstOut);\nsecondPart.pipe(secondOut);\n```\n\n## API Documentation\n\n### fdSlicer.createFromFd(fd, [options])\n\n```js\nvar fdSlicer = require('fd-slicer');\nfs.open(\"file.txt\", 'r', function(err, fd) {\n  if (err) throw err;\n  var slicer = fdSlicer.createFromFd(fd);\n  // ...\n});\n```\n\nMake sure `fd` is a properly initialized file descriptor. If you want to\nuse `createReadStream` make sure you open it for reading and if you want\nto use `createWriteStream` make sure you open it for writing.\n\n`options` is an optional object which can contain:\n\n * `autoClose` - if set to `true`, the file descriptor will be automatically\n   closed once the last stream that references it is closed. Defaults to\n   `false`. `ref()` and `unref()` can be used to increase or decrease the\n   reference count, respectively.\n\n### fdSlicer.createFromBuffer(buffer, [options])\n\n```js\nvar fdSlicer = require('fd-slicer');\nvar slicer = fdSlicer.createFromBuffer(someBuffer);\n// ...\n```\n\n`options` is an optional object which can contain:\n\n * `maxChunkSize` - A `Number` of bytes. see `createReadStream()`.\n   If falsey, defaults to unlimited.\n\n#### Properties\n\n##### fd\n\nThe file descriptor passed in. `undefined` if created from a buffer.\n\n#### Methods\n\n##### createReadStream(options)\n\nAvailable `options`:\n\n * `start` - Number. The offset into the file to start reading from. Defaults\n   to 0.\n * `end` - Number. Exclusive upper bound offset into the file to stop reading\n   from.\n * `highWaterMark` - Number. The maximum number of bytes to store in the\n   internal buffer before ceasing to read from the underlying resource.\n   Defaults to 16 KB.\n * `encoding` - String. If specified, then buffers will be decoded to strings\n   using the specified encoding. Defaults to `null`.\n\nThe ReadableStream that this returns has these additional methods:\n\n * `destroy(err)` - stop streaming. `err` is optional and is the error that\n   will be emitted in order to cause the streaming to stop. Defaults to\n   `new Error(\"stream destroyed\")`.\n\nIf `maxChunkSize` was specified (see `createFromBuffer()`), the read stream\nwill provide chunks of at most that size. Normally, the read stream provides\nthe entire range requested in a single chunk, but this can cause performance\nproblems in some circumstances.\nSee [thejoshwolfe/yauzl#87](https://github.com/thejoshwolfe/yauzl/issues/87).\n\n##### createWriteStream(options)\n\nAvailable `options`:\n\n * `start` - Number. The offset into the file to start writing to. Defaults to\n   0.\n * `end` - Number. Exclusive upper bound offset into the file. If this offset\n   is reached, the write stream will emit an 'error' event and stop functioning.\n   In this situation, `err.code === 'ETOOBIG'`. Defaults to `Infinity`.\n * `highWaterMark` - Number. Buffer level when `write()` starts returning\n   false. Defaults to 16KB.\n * `decodeStrings` - Boolean. Whether or not to decode strings into Buffers\n   before passing them to` _write()`. Defaults to `true`.\n\nThe WritableStream that this returns has these additional methods:\n\n * `destroy()` - stop streaming\n\nAnd these additional properties:\n\n * `bytesWritten` - number of bytes written to the stream\n\nAnd these additional events:\n\n * 'progress' - emitted when `bytesWritten` changes.\n\n##### read(buffer, offset, length, position, callback)\n\nEquivalent to `fs.read`, but with concurrency protection.\n`callback` must be defined.\n\n##### write(buffer, offset, length, position, callback)\n\nEquivalent to `fs.write`, but with concurrency protection.\n`callback` must be defined.\n\n##### ref()\n\nIncrease the `autoClose` reference count by 1.\n\n##### unref()\n\nDecrease the `autoClose` reference count by 1.\n\n#### Events\n\n##### 'error'\n\nEmitted if `fs.close` returns an error when auto closing.\n\n##### 'close'\n\nEmitted when fd-slicer closes the file descriptor due to `autoClose`. Never\nemitted if created from a buffer.\n","time":{"created":"2022-01-27T08:52:25.530Z","modified":"2022-01-27T08:52:25.530Z","1.2.0":"2020-02-23T07:10:59.563Z"},"versions":{"1.2.0":{"name":"fd-slicer2","version":"1.2.0","description":"Fork of fd-slicer that fixes the DEP00005 deprecation error","main":"index.js","scripts":{"test":"mocha --check-leaks","test:coverage":"nyc mocha -- --reporter dot --check-leaks test/test.js"},"author":{"name":"Nour Al-Habash","email":"nour35000@gmail.com"},"license":"MIT","devDependencies":{"mocha":"^7.0.1","nyc":"^15.0.0","stream-equal":"^1.1.1","streamsink":"^1.2.0"},"dependencies":{"pend":"^1.2.0"},"directories":{"test":"test"},"repository":{"type":"git","url":"git://github.com/nalhabash/fd-slicer2.git"},"bugs":{"url":"https://github.com/nalhabash/fd-slicer2/issues"},"keywords":["createReadStream","createWriteStream"],"gitHead":"86564f7fbff50dc6ae65ff369256ce25203119d1","homepage":"https://github.com/nalhabash/fd-slicer2#readme","_id":"fd-slicer2@1.2.0","_nodeVersion":"13.9.0","_npmVersion":"6.13.7","dist":{"integrity":"sha512-3lBUNUckhMZduCc4g+Pw4Ve16LD9vpX9b8qUkkKq2mgDRLYWzblszZH2luADnJqjJe+cypngjCuKRm/IW12rRw==","shasum":"a2c54a540639bbcd4702480821771341277ca20e","tarball":"https://registry.npmmirror.com/fd-slicer2/-/fd-slicer2-1.2.0.tgz","fileCount":5,"unpackedSize":16990,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeUiWDCRA9TVsSAnZWagAAMv8P/2c3/mD6e97ed9uwsxVV\nwwdaK3y3PNKha96Dsh2UCh5AGgEzdASTAYLN8+xVGBF+kpqHm5UutmwoNxAT\n46G0VKynA2k405C/P8x6UcWE3WyajZ8tgf7HSp+15SFKdB/V7LLW56HUGTcv\n8Smy3hq1hOvChtCfimqwI9v0lpPyLTI57bV0Hhjxi75jeXHpqOPaKhuxcXhP\nUst9PO5mUTKWsdmYb0W7sKtwjjAh2BbsecjTcbQWoVe5qOpzLa+1MyydH5Sf\n/32TxC0nPZWOqhyApN0P1vabvUo8WaiX5rnoUGzeIOJ8nCvKu9CMDkmArJ4d\nd+MQv49JLn598DUE3pVWTtvcRLS9JoBnDD0azrOKNbQvvk891WdQTy1e5piF\nrkqf+mfV15uz3cGGHA4dQXQHyUJiYnPJnbwjktD4M8+DN0RlBE7vE23jb8ww\n+6xmip6UybuDqTat+eJr8s7cnjLvwQ2gRGC8TLsoKYGgqkhlh+uyj5et+J2L\n41wPEaKmlcyYIhXkzzBXb86lD1TSDGSmhppGCEwQYGYyvbqozm/xonTT8ttS\n3SsAjecPltJXxzpUGULZVJUtEiloM66At8EK6UL9c/WIIRYJKLEFXOOguyC7\nGv1nvqqaVfwtZSr8sxsboMRhDBVSKF58JYVk9WYMhm+phQ8TVfMndT+I/8Oc\nWcYy\r\n=DP/w\r\n-----END PGP SIGNATURE-----\r\n","size":5546},"maintainers":[{"name":"nalhabash","email":"nour35000@gmail.com"}],"_npmUser":{"name":"nalhabash","email":"nour35000@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/fd-slicer2_1.2.0_1582441859469_0.6579965207813179"},"_hasShrinkwrap":false,"_cnpmcore_publish_time":"2021-12-24T15:49:53.544Z"}},"_source_registry_name":"default"}